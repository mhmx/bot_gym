import telebot
from telebot import types
import mysql.connector
from mysql.connector import Error
import pandas as pd
from datetime import datetime
import json
import logging
from config import BOT_TOKEN, DB_CONFIG, LOG_LEVEL, EXERCISES_FILE, NUMBERS_FILE, STATS_DIR

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=getattr(logging, LOG_LEVEL))
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserState:
    MAIN_MENU = "main_menu"
    CHOOSE_MUSCLE_GROUP = "choose_muscle_group"
    CHOOSE_EXERCISE = "choose_exercise"
    CHOOSE_REPS = "choose_reps"
    CHOOSE_WEIGHT = "choose_weight"
    EXERCISE_IN_PROGRESS = "exercise_in_progress"
    SUPERSET_CHOOSE_FIRST_EXERCISE = "superset_choose_first_exercise"
    SUPERSET_CHOOSE_SECOND_EXERCISE = "superset_choose_second_exercise"
    SUPERSET_FIRST_EXERCISE_REPS = "superset_first_exercise_reps"
    SUPERSET_FIRST_EXERCISE_WEIGHT = "superset_first_exercise_weight"
    SUPERSET_SECOND_EXERCISE_REPS = "superset_second_exercise_reps"
    SUPERSET_SECOND_EXERCISE_WEIGHT = "superset_second_exercise_weight"
    SUPERSET_IN_PROGRESS = "superset_in_progress"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_exercises_from_db():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    connection = get_db_connection()
    if not connection:
        return {}
    
    try:
        cursor = connection.cursor()
        cursor.execute("SELECT muscle_group, exercise_name FROM exercises ORDER BY muscle_group, exercise_name")
        rows = cursor.fetchall()
        
        exercises = {}
        for muscle_group, exercise_name in rows:
            if muscle_group not in exercises:
                exercises[muscle_group] = []
            exercises[muscle_group].append(exercise_name)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –ë–î: {len(exercises)} –≥—Ä—É–ø–ø")
        return exercises
        
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –ë–î: {e}")
        return {}
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

def load_weights_from_db():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    connection = get_db_connection()
    if not connection:
        return [0.0, 2.5, 5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0]
    
    try:
        cursor = connection.cursor()
        cursor.execute("SELECT weight FROM available_weights WHERE is_active = TRUE ORDER BY weight")
        rows = cursor.fetchall()
        
        weights = [float(row[0]) for row in rows]
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–µ—Å–æ–≤ –∏–∑ –ë–î: {len(weights)}")
        return weights
        
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Å–æ–≤ –∏–∑ –ë–î: {e}")
        return [0.0, 2.5, 5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0]
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

def populate_default_weights():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤–µ—Å–æ–≤ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞"""
    connection = get_db_connection()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–µ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute("SELECT COUNT(*) FROM available_weights")
        count = cursor.fetchone()[0]
        
        if count == 0:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–µ—Å–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_weights = [0.0, 1.0, 2.0, 2.5, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0, 7.5, 8.0, 9.0, 10.0, 11.0, 12.0, 12.5, 15.0, 17.0, 17.5, 18.0, 20.0, 21.5, 22.5, 23.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0]
            
            for weight in default_weights:
                cursor.execute("""
                    INSERT IGNORE INTO available_weights (weight) 
                    VALUES (%s)
                """, (weight,))
            
            connection.commit()
            logger.info(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –≤–µ—Å–æ–≤: {len(default_weights)} –∑–Ω–∞—á–µ–Ω–∏–π")
        
        return True
        
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤–µ—Å–æ–≤: {e}")
        return False
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
exercises_data = {}
weights_data = []

def initialize_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global exercises_data, weights_data
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –ë–î
    exercises_data = load_exercises_from_db()
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–µ—Å–æ–≤ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
    populate_default_weights()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞ –∏–∑ –ë–î
    weights_data = load_weights_from_db()
    
    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(exercises_data)} –≥—Ä—É–ø–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, {len(weights_data)} –≤–µ—Å–æ–≤")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        return connection
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã"""
    connection = get_db_connection()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS exercises (
                id INT AUTO_INCREMENT PRIMARY KEY,
                muscle_group VARCHAR(50) NOT NULL,
                exercise_name VARCHAR(100) NOT NULL,
                UNIQUE KEY unique_exercise (muscle_group, exercise_name)
            )
        """)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS workout_stats (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id BIGINT NOT NULL,
                date DATE NOT NULL,
                muscle_group VARCHAR(50) NOT NULL,
                exercise_name VARCHAR(100) NOT NULL,
                set_number INT NOT NULL,
                weight DECIMAL(5,2) NOT NULL,
                reps INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É–ø–µ—Ä—Å–µ—Ç–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS supersets (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id BIGINT NOT NULL,
                date DATE NOT NULL,
                first_exercise_group VARCHAR(50) NOT NULL,
                first_exercise_name VARCHAR(100) NOT NULL,
                second_exercise_group VARCHAR(50) NOT NULL,
                second_exercise_name VARCHAR(100) NOT NULL,
                set_number INT NOT NULL,
                first_weight DECIMAL(5,2) NOT NULL,
                first_reps INT NOT NULL,
                second_weight DECIMAL(5,2) NOT NULL,
                second_reps INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Å–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS available_weights (
                id INT AUTO_INCREMENT PRIMARY KEY,
                weight DECIMAL(5,2) NOT NULL UNIQUE,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        connection.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
        
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
def get_user_state(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_states.get(chat_id, {})

def set_user_state(chat_id, state, data=None):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in user_states:
        user_states[chat_id] = {}
    
    user_states[chat_id]['state'] = state
    if data:
        user_states[chat_id].update(data)

def clear_user_state(chat_id):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id in user_states:
        del user_states[chat_id]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –º–∞–ø–ø–∏–Ω–≥–æ–≤
def create_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üèãÔ∏è –û–¥–∏–Ω–æ—á–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="single_exercise"))
    keyboard.add(types.InlineKeyboardButton("üí™ –°—É–ø–µ—Ä—Å—ç—Ç", callback_data="superset"))
    return keyboard

def build_muscle_groups_keyboard_and_state(chat_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –º—ã—à—Ü —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ callback –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    keyboard = types.InlineKeyboardMarkup()
    groups = list(exercises_data.keys())
    mg_map = {str(idx): group for idx, group in enumerate(groups)}
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(chat_id, get_user_state(chat_id).get('state', UserState.MAIN_MENU), {'mg_map': mg_map})
    for idx, group in mg_map.items():
        keyboard.add(types.InlineKeyboardButton(group, callback_data=f"mg:{idx}"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard

def build_exercises_keyboard_and_state(chat_id, muscle_group):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ callback –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    keyboard = types.InlineKeyboardMarkup()
    exercises = exercises_data.get(muscle_group, [])
    ex_map = {str(idx): ex for idx, ex in enumerate(exercises)}
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(chat_id, get_user_state(chat_id).get('state', UserState.MAIN_MENU), {'ex_map': ex_map})
    for idx, exercise in ex_map.items():
        keyboard.add(types.InlineKeyboardButton(exercise, callback_data=f"ex:{idx}"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_muscle_groups"))
    return keyboard

def create_reps_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    keyboard = types.InlineKeyboardMarkup()
    reps_options = [8, 10, 12, 15, 20, 25, 30]
    for i in range(0, len(reps_options), 3):
        row = []
        for j in range(3):
            if i + j < len(reps_options):
                reps = reps_options[i + j]
                row.append(types.InlineKeyboardButton(str(reps), callback_data=f"reps_{reps}"))
        keyboard.row(*row)
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_exercise"))
    return keyboard

def create_weights_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–µ—Å–∞–º–∏"""
    keyboard = types.InlineKeyboardMarkup()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    main_weights = weights_data[:16]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 16 –≤–µ—Å–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    
    for i in range(0, len(main_weights), 4):
        row = []
        for j in range(4):
            if i + j < len(main_weights):
                weight = main_weights[i + j]
                row.append(types.InlineKeyboardButton(str(weight), callback_data=f"weight_{weight}"))
        keyboard.row(*row)
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_reps"))
    return keyboard

def create_continue_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚ûï –°–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥", callback_data="next_set"))
    keyboard.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="finish_exercise"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    set_user_state(chat_id, UserState.MAIN_MENU)
    
    welcome_text = """
üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gym Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ.

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
"""
    
    bot.send_message(chat_id, welcome_text, reply_markup=create_main_menu_keyboard())

@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üèãÔ∏è –û–¥–∏–Ω–æ—á–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ - –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É
üí™ –°—É–ø–µ—Ä—Å—ç—Ç - –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–≤–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
"""
    bot.send_message(message.chat.id, help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–æ–≤"""
    chat_id = call.message.chat.id
    user_state = get_user_state(chat_id)
    current_state = user_state.get('state', UserState.MAIN_MENU)
    
    try:
        if call.data == "single_exercise":
            handle_single_exercise_start(call)
        elif call.data == "superset":
            handle_superset_start(call)
        elif call.data.startswith("muscle_group_"):
            handle_muscle_group_selection(call)
        elif call.data.startswith("exercise_"):
            handle_exercise_selection(call)
        elif call.data.startswith("reps_"):
            handle_reps_selection(call)
        elif call.data.startswith("weight_"):
            handle_weight_selection(call)
        elif call.data == "next_set":
            handle_next_set(call)
        elif call.data == "finish_exercise":
            handle_finish_exercise(call)
        elif call.data == "back_to_main":
            handle_back_to_main(call)
        elif call.data == "back_to_muscle_groups":
            handle_back_to_muscle_groups(call)
        elif call.data == "back_to_exercise":
            handle_back_to_exercise(call)
        elif call.data == "back_to_reps":
            handle_back_to_reps(call)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def handle_single_exercise_start(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    chat_id = call.message.chat.id
    set_user_state(chat_id, UserState.CHOOSE_MUSCLE_GROUP)
    
    text = "üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:"
    bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=build_muscle_groups_keyboard_and_state(chat_id))
    bot.answer_callback_query(call.id)

def handle_superset_start(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å—É–ø–µ—Ä—Å—ç—Ç–∞"""
    chat_id = call.message.chat.id
    set_user_state(chat_id, UserState.SUPERSET_CHOOSE_FIRST_EXERCISE)
    
    text = "üí™ –°—É–ø–µ—Ä—Å—ç—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:"
    bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=build_muscle_groups_keyboard_and_state(chat_id))
    bot.answer_callback_query(call.id)

def handle_muscle_group_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü"""
    chat_id = call.message.chat.id
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏ —Å—Ç–∞—Ä—ã—Ö callback
    if call.data.startswith("mg:"):
        idx = call.data.split(":", 1)[1]
        muscle_group = get_user_state(chat_id).get('mg_map', {}).get(idx)
    else:
        muscle_group = call.data.replace("muscle_group_", "")
    user_state = get_user_state(chat_id)
    current_state = user_state.get('state')
    
    if current_state == UserState.CHOOSE_MUSCLE_GROUP:
        set_user_state(chat_id, UserState.CHOOSE_EXERCISE, {'muscle_group': muscle_group})
        text = f"üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã '{muscle_group}':"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=build_exercises_keyboard_and_state(chat_id, muscle_group))
    elif current_state == UserState.SUPERSET_CHOOSE_FIRST_EXERCISE:
        set_user_state(chat_id, UserState.SUPERSET_CHOOSE_FIRST_EXERCISE, {'first_muscle_group': muscle_group})
        text = f"üí™ –°—É–ø–µ—Ä—Å—ç—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã '{muscle_group}':"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=build_exercises_keyboard_and_state(chat_id, muscle_group))
    elif current_state == UserState.SUPERSET_CHOOSE_SECOND_EXERCISE:
        set_user_state(chat_id, UserState.SUPERSET_CHOOSE_SECOND_EXERCISE, {'second_muscle_group': muscle_group})
        text = f"üí™ –°—É–ø–µ—Ä—Å—ç—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã '{muscle_group}':"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=build_exercises_keyboard_and_state(chat_id, muscle_group))
    
    bot.answer_callback_query(call.id)

def handle_exercise_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    chat_id = call.message.chat.id
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏ —Å—Ç–∞—Ä—ã—Ö callback
    if call.data.startswith("ex:"):
        idx = call.data.split(":", 1)[1]
        exercise = get_user_state(chat_id).get('ex_map', {}).get(idx)
    else:
        exercise = call.data.replace("exercise_", "")
    user_state = get_user_state(chat_id)
    current_state = user_state.get('state')
    
    if current_state == UserState.CHOOSE_EXERCISE:
        muscle_group = user_state.get('muscle_group')
        set_user_state(chat_id, UserState.CHOOSE_REPS, {
            'muscle_group': muscle_group,
            'exercise': exercise,
            'sets': []
        })
        text = f"üèãÔ∏è {muscle_group} - {exercise}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_reps_keyboard())
    elif current_state == UserState.SUPERSET_CHOOSE_FIRST_EXERCISE:
        first_muscle_group = user_state.get('first_muscle_group')
        set_user_state(chat_id, UserState.SUPERSET_CHOOSE_SECOND_EXERCISE, {
            'first_muscle_group': first_muscle_group,
            'first_exercise': exercise
        })
        text = f"üí™ –°—É–ø–µ—Ä—Å—ç—Ç\n\n–ü–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {first_muscle_group} - {exercise}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=build_muscle_groups_keyboard_and_state(chat_id))
    elif current_state == UserState.SUPERSET_CHOOSE_SECOND_EXERCISE:
        second_muscle_group = user_state.get('second_muscle_group')
        first_muscle_group = user_state.get('first_muscle_group')
        first_exercise = user_state.get('first_exercise')
        set_user_state(chat_id, UserState.SUPERSET_FIRST_EXERCISE_REPS, {
            'first_muscle_group': first_muscle_group,
            'first_exercise': first_exercise,
            'second_muscle_group': second_muscle_group,
            'second_exercise': exercise,
            'sets': []
        })
        text = f"üí™ –°—É–ø–µ—Ä—Å—ç—Ç\n\n1Ô∏è‚É£ {first_muscle_group} - {first_exercise}\n2Ô∏è‚É£ {second_muscle_group} - {exercise}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_reps_keyboard())
    
    bot.answer_callback_query(call.id)

def handle_reps_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    chat_id = call.message.chat.id
    reps = int(call.data.replace("reps_", ""))
    user_state = get_user_state(chat_id)
    current_state = user_state.get('state')
    
    if current_state == UserState.CHOOSE_REPS:
        set_user_state(chat_id, UserState.CHOOSE_WEIGHT, {'current_reps': reps})
        text = f"üèãÔ∏è {user_state.get('muscle_group')} - {user_state.get('exercise')}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {reps}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å:"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_weights_keyboard())
    elif current_state == UserState.SUPERSET_FIRST_EXERCISE_REPS:
        set_user_state(chat_id, UserState.SUPERSET_FIRST_EXERCISE_WEIGHT, {'first_reps': reps})
        first_muscle_group = user_state.get('first_muscle_group')
        first_exercise = user_state.get('first_exercise')
        text = f"üí™ –°—É–ø–µ—Ä—Å—ç—Ç\n\n1Ô∏è‚É£ {first_muscle_group} - {first_exercise}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {reps}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_weights_keyboard())
    elif current_state == UserState.SUPERSET_SECOND_EXERCISE_REPS:
        set_user_state(chat_id, UserState.SUPERSET_SECOND_EXERCISE_WEIGHT, {'second_reps': reps})
        second_muscle_group = user_state.get('second_muscle_group')
        second_exercise = user_state.get('second_exercise')
        text = f"üí™ –°—É–ø–µ—Ä—Å—ç—Ç\n\n2Ô∏è‚É£ {second_muscle_group} - {second_exercise}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {reps}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_weights_keyboard())
    
    bot.answer_callback_query(call.id)

def handle_weight_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–µ—Å–∞"""
    chat_id = call.message.chat.id
    weight = float(call.data.replace("weight_", ""))
    user_state = get_user_state(chat_id)
    current_state = user_state.get('state')
    
    if current_state == UserState.CHOOSE_WEIGHT:
        reps = user_state.get('current_reps')
        muscle_group = user_state.get('muscle_group')
        exercise = user_state.get('exercise')
        sets = user_state.get('sets', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥
        new_set = {'reps': reps, 'weight': weight}
        sets.append(new_set)
        
        set_user_state(chat_id, UserState.EXERCISE_IN_PROGRESS, {'sets': sets})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        text = f"üèãÔ∏è {muscle_group} - {exercise}\n\n"
        for i, set_data in enumerate(sets, 1):
            text += f"–ü–æ–¥—Ö–æ–¥ {i}: {set_data['reps']} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π √ó {set_data['weight']} –∫–≥\n"
        
        text += "\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_continue_keyboard())
        
    elif current_state == UserState.SUPERSET_FIRST_EXERCISE_WEIGHT:
        first_reps = user_state.get('first_reps')
        first_muscle_group = user_state.get('first_muscle_group')
        first_exercise = user_state.get('first_exercise')
        set_user_state(chat_id, UserState.SUPERSET_SECOND_EXERCISE_REPS, {'first_weight': weight})
        
        text = f"üí™ –°—É–ø–µ—Ä—Å—ç—Ç\n\n1Ô∏è‚É£ {first_muscle_group} - {first_exercise}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {first_reps}, –í–µ—Å: {weight} –∫–≥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_reps_keyboard())
        
    elif current_state == UserState.SUPERSET_SECOND_EXERCISE_WEIGHT:
        second_reps = user_state.get('second_reps')
        second_muscle_group = user_state.get('second_muscle_group')
        second_exercise = user_state.get('second_exercise')
        first_muscle_group = user_state.get('first_muscle_group')
        first_exercise = user_state.get('first_exercise')
        first_reps = user_state.get('first_reps')
        first_weight = user_state.get('first_weight')
        sets = user_state.get('sets', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ —Å—É–ø–µ—Ä—Å—ç—Ç–∞
        new_set = {
            'first_reps': first_reps,
            'first_weight': first_weight,
            'second_reps': second_reps,
            'second_weight': weight
        }
        sets.append(new_set)
        
        set_user_state(chat_id, UserState.SUPERSET_IN_PROGRESS, {'sets': sets})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        text = f"üí™ –°—É–ø–µ—Ä—Å—ç—Ç\n\n"
        for i, set_data in enumerate(sets, 1):
            text += f"–ü–æ–¥—Ö–æ–¥ {i}:\n"
            text += f"1Ô∏è‚É£ {first_muscle_group} - {first_exercise}: {set_data['first_reps']} √ó {set_data['first_weight']} –∫–≥\n"
            text += f"2Ô∏è‚É£ {second_muscle_group} - {second_exercise}: {set_data['second_reps']} √ó {set_data['second_weight']} –∫–≥\n\n"
        
        text += "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_continue_keyboard())
    
    bot.answer_callback_query(call.id)

def handle_next_set(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞"""
    chat_id = call.message.chat.id
    user_state = get_user_state(chat_id)
    current_state = user_state.get('state')
    
    if current_state == UserState.EXERCISE_IN_PROGRESS:
        muscle_group = user_state.get('muscle_group')
        exercise = user_state.get('exercise')
        set_user_state(chat_id, UserState.CHOOSE_REPS)
        text = f"üèãÔ∏è {muscle_group} - {exercise}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_reps_keyboard())
    elif current_state == UserState.SUPERSET_IN_PROGRESS:
        first_muscle_group = user_state.get('first_muscle_group')
        first_exercise = user_state.get('first_exercise')
        set_user_state(chat_id, UserState.SUPERSET_FIRST_EXERCISE_REPS)
        text = f"üí™ –°—É–ø–µ—Ä—Å—ç—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n1Ô∏è‚É£ {first_muscle_group} - {first_exercise}"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_reps_keyboard())
    
    bot.answer_callback_query(call.id)

def handle_finish_exercise(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    chat_id = call.message.chat.id
    user_state = get_user_state(chat_id)
    current_state = user_state.get('state')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if current_state == UserState.EXERCISE_IN_PROGRESS:
        save_single_exercise_data(chat_id, user_state)
    elif current_state == UserState.SUPERSET_IN_PROGRESS:
        save_superset_data(chat_id, user_state)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    clear_user_state(chat_id)
    set_user_state(chat_id, UserState.MAIN_MENU)
    
    text = "‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"
    bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_main_menu_keyboard())
    bot.answer_callback_query(call.id, "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

def handle_back_to_main(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = call.message.chat.id
    clear_user_state(chat_id)
    set_user_state(chat_id, UserState.MAIN_MENU)
    
    text = "üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"
    bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_main_menu_keyboard())
    bot.answer_callback_query(call.id)

def handle_back_to_muscle_groups(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã –º—ã—à—Ü"""
    chat_id = call.message.chat.id
    set_user_state(chat_id, UserState.CHOOSE_MUSCLE_GROUP)
    
    text = "üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:"
    bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=build_muscle_groups_keyboard_and_state(chat_id))
    bot.answer_callback_query(call.id)

def handle_back_to_exercise(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    chat_id = call.message.chat.id
    user_state = get_user_state(chat_id)
    muscle_group = user_state.get('muscle_group')
    
    set_user_state(chat_id, UserState.CHOOSE_EXERCISE, {'muscle_group': muscle_group})
    
    text = f"üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã '{muscle_group}':"
    bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=build_exercises_keyboard_and_state(chat_id, muscle_group))
    bot.answer_callback_query(call.id)

def handle_back_to_reps(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    chat_id = call.message.chat.id
    user_state = get_user_state(chat_id)
    muscle_group = user_state.get('muscle_group')
    exercise = user_state.get('exercise')
    
    set_user_state(chat_id, UserState.CHOOSE_REPS, {
        'muscle_group': muscle_group,
        'exercise': exercise,
        'sets': user_state.get('sets', [])
    })
    
    text = f"üèãÔ∏è {muscle_group} - {exercise}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:"
    bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=create_reps_keyboard())
    bot.answer_callback_query(call.id)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_single_exercise_data(chat_id, user_state):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    connection = get_db_connection()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor()
        
        muscle_group = user_state.get('muscle_group')
        exercise = user_state.get('exercise')
        sets = user_state.get('sets', [])
        current_date = datetime.now().date()
        
        for i, set_data in enumerate(sets, 1):
            cursor.execute("""
                INSERT INTO workout_stats (chat_id, date, muscle_group, exercise_name, set_number, weight, reps)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (chat_id, current_date, muscle_group, exercise, i, set_data['weight'], set_data['reps']))
        
        connection.commit()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        return True
        
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
        return False
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

def save_superset_data(chat_id, user_state):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É–ø–µ—Ä—Å—ç—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    connection = get_db_connection()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor()
        
        first_muscle_group = user_state.get('first_muscle_group')
        first_exercise = user_state.get('first_exercise')
        second_muscle_group = user_state.get('second_muscle_group')
        second_exercise = user_state.get('second_exercise')
        sets = user_state.get('sets', [])
        current_date = datetime.now().date()
        
        for i, set_data in enumerate(sets, 1):
            cursor.execute("""
                INSERT INTO supersets (chat_id, date, first_exercise_group, first_exercise_name, 
                                     second_exercise_group, second_exercise_name, set_number, 
                                     first_weight, first_reps, second_weight, second_reps)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (chat_id, current_date, first_muscle_group, first_exercise, 
                  second_muscle_group, second_exercise, i, 
                  set_data['first_weight'], set_data['first_reps'],
                  set_data['second_weight'], set_data['second_reps']))
        
        connection.commit()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—É–ø–µ—Ä—Å—ç—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        return True
        
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—É–ø–µ—Ä—Å—ç—Ç–∞: {e}")
        return False
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Gym Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not init_database():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    initialize_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if not exercises_data:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
